{
  "name": "npmsmartimporter",
  "displayName": "NPM Smart Importer",
  "description": "An extension provides a quick fix action to insert import statements for undeclared variables based on common naming conventions",
  "author": {
    "name": "Andrei Zubov",
    "email": "reflection.dm@gmail.com",
    "url": "https://github.com/reflectiondm"
  },
  "version": "2.2.1",
  "icon": "icon.png",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/reflectiondm/vscode-npmsmartimporter.git"
  },
  "publisher": "reflectiondm",
  "engines": {
    "vscode": "^1.15.0"
  },
  "categories": [
    "Snippets",
    "Other"
  ],
  "keywords": [
    "npm",
    "import",
    "require",
    "undeclared variable",
    "multi-root ready"
  ],
  "activationEvents": [
    "onLanguage:javascript",
    "onLanguage:javascriptreact",
    "onLanguage:typescript",
    "onLanguage:typescriptreact"
  ],
  "main": "./out/src/extension",
  "contributes": {
    "commands": [
      {
        "command": "npmSmartImporter.import",
        "title": "Smart import"
      }
    ],
    "configuration": {
      "title": "NpmSmartImporter configuration",
      "properties": {
        "npmSmartImporter.autoDetectImportStatement": {
          "type": "boolean",
          "default": true,
          "description": "Indicates if smart importer should figure out which import statement to use based on what imports are already present in the file. If none found it will adhere to useES6Import value",
          "scope": "resource"
        },
        "npmSmartImporter.useES6Import": {
          "type": "boolean",
          "default": true,
          "description": "If true, es6 import statement will be used for new imports",
          "scope": "resource"
        },
        "npmSmartImporter.provideImportSuggestionsOnSelection": {
          "type": "boolean",
          "default": false,
          "description": "If true, import suggestions will be provided not only for linting errors, but also when a variable is highlighted. It is useful when you do not use linter for some reason, or linting is disabled for undeclared variables.",
          "scope": "resource"
        },
        "npmSmartImporter.customNamingConventions": {
          "type": "object",
          "default": {},
          "description": "An object with keys setting naming conventions for variables and values for package names used in the project. For example: { 'osm': 'awesome-package', 'tea': 'chai' }",
          "scope": "resource"
        },
        "npmSmartImporter.ignore": {
          "type": "array",
          "default": [
            "**/node_modules"
          ],
          "description": "An array of glob patterns to be ignored when resolving modules names.",
          "scope": "resource"
        },
        "npmSmartImporter.excludeExtension": {
          "type": "boolean",
          "default": true,
          "description": "If true, the module file name extension will not be included into the suggested import",
          "scope": "resource"
        },
        "npmSmartImporter.skipInitialDotForRelativePath": {
          "type": "boolean",
          "default": true,
          "description": "If true, the initial dot in relative paths like './../my-file-name' will be skipped resulting into '../my-file-name' line",
          "scope": "resource"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "tsc -p ./",
    "compile": "tsc -watch -p ./",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "node ./node_modules/vscode/bin/test"
  },
  "devDependencies": {
    "@types/chai": "^4.0.10",
    "@types/glob": "^5.0.34",
    "@types/lodash": "^4.14.88",
    "@types/mocha": "^2.2.44",
    "@types/node": "^8.0.58",
    "chai": "^4.1.2",
    "mocha": "^4.0.1",
    "tslint": "^5.8.0",
    "typescript": "^2.6.2",
    "vscode": "^1.1.10"
  },
  "dependencies": {
    "glob": "^7.1.2",
    "lodash": "^4.17.4"
  }
}
